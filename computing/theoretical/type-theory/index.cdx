[title|Advanced Type Theory]

[section Introduction|
 [p|At this point, we have covered in detail many the foundations of type theory
  - starting with the simply typed lambda-calculus and moving upwards to
  dependent types, with some detours into classical logic, subtyping and
 effect-systems.]

 [p|Now, the world of type-theory is open for exploration. This page is
  structured into sections, but is not intended to be tackled linearly. Each
  section represents an area within type theory, and consists of an overview of
  that area supplemented with links to various important research papaers.]]

[section 'Properties of Type Systems'|
  [p|]

  [section 'Extrinsic vs Intrinsic'|
    [p|]

    [p|]]

  [section Predicativity|
   [p|Predicativity is a generic mathematical term with no strict formal
    definition. In general, something is said to be impredicative if it somehow
    refers to itself in its own definition. Traditionally, unbounded
    impredicativity leads to inconsistency. For example, the famous Russel's
    Paradox occurred because early versions of set theory allowed us to
    construct "The set of all sets that do not contain themselves".]

   [p|In the context of type theory, predicative vs impredicative is usually
    referring to systems with a type of types, which we'll call [m|\mathbf P].
    It has been shown that dependent type systems with [m|\mathbf P:\mathbf P]
    are inconsistent, so use [m|\mathbf T] to denote the type of [m|\mathbf P].
    Then, if the system types [m|\Pi (A:\mathbf P). B : \mathbf P] for
    [m|B : \mathbf P], then the system is said to be [i|impredicative]. If,
    however, it instead types [m|\Pi (A:\mathbf P). B : \mathbf T], then the
    system is [i|predicative]. This typing should generalize to whatever else
    exists in the langauge (custom types, dependent sums, etc.)]

   [p|The definition of predicativity does not just apply to dependent type
    systems, however. For example, System F is an impredicatve system, because
    taking for example [m|\forall \alpha.\alpha\to\alpha], the type variable
    '[m|\alpha]' is being quantified over all types, including the type it is
    part of. Further, predicativity can be generalized to theories with, for
    example, a hierarchy of types. Impredicative systems are usually more
    powerful, but one has to be more careful - combining particular features with
    impredicativity may make a system inconsistent.]]]

[section 'Substructural Type Systems'|
 [p|Substructural type systems inherit their name from the logics upon which
  they are based: substructural logics. These type systems play with the rules
  of weakening, exchange and contraction to limit the uses of a bound variable
  (e.g. in a [mono|let] or function argument). For example, in linear type
  systems, a bound variable must be used exactly once, while in an affine type
  system, it may be used at most once.]

 [p|These changes mean that linear type systems are very good at constraining
  access to various resources. A 'resource' doesn't have a strict definition,
  but may refer to things like files or memeory. By employing substructural type
  systems we can, e.g. ensure that a file isn't used after it is closed, or that
  we don't leak memory.]

 [ul|
  [li|Linear Types]
  [li|Affine Types]
  [li|Session Types]]]

[section 'Dependent Type Systems'|

 [section Calculi|
 [ul|
  [li|Calculus of Constructions]
  [li|Martin-Lof Type Theory]
  [li|Homotopy Type Theory]]]

 [section Properties|
  [ref doc:computing/theoretical/type-theory/dependent-types|Main Page]

  [ol|
   [li|Predicativity]
   [li|Large Elimination]
   [li|[ref doc:computing/theoretical/type-theory/classical-logic|Classical Logic]]]

  

  [section 'Classical Logic'|]]]

[section 'Session Types'|
 [p|Session types are used to ensure correctness in concurrent programs. In
  general, session types are based around the idea of two or more processes
  sending and receiving messages.]]

[section 'Type Inference ALgorithms'|]

[section 'Logic Type Systems'|]