[title|Type Theory]

[!|[tags| Notes]!]

[section Introduction|
  [p|This page is a follow-up to the [ref doc:computing/theoretical/semantics
  |Semantics of programming Languages] page, and so it would help to be familiar
  with the concepts of that page.] 

  [p|Types form an important link between theoretical computer science and
   practical language design. Types have many uses, including:]
  [ul|
   [li Structure|Types provide support for structuring large (or even medium) size programs]
   [li Documentation|Types provide a description of how a function/object etc.
    can be interacted with.]
   [li Efficiency|Types can be used for various kinds of optimisation, e.g. we
    can reduce [m|n \times 2] to the more efficient [m|n + n] if we know that
    [m|n] is an integer.]
   [li Safety|Types are used to prevent 'bad' program behaviour (related to
    error checking).]]
  ]


[section 'The Simply Typed Lambda Calculus'|
  [section 'Definition and Proofs'|]
  [section 'The Curry-Howard Correspondance'|]
  [section 'Extensions to the STLC'|] ]


[section 'System F'|
  [section 'Motivation'|
    [p|Recall from earlier when we encoded the booleans in the Simply Typed Lambda Calculus:]

    [code none|
     choose ≜ λ b:Bool. λx:1. λy:1.
      case b
        (L a → x)
        (R b → y)]

    [p|This function has type [m|Bool \to 1 \to 1], and is rather useless -
     always returning [m|\langle\rangle]. However, we could swap the types
     around, e.g. swap the types of [m|x] and [m|y] for Bool. This is more
     useful because we can then write, e.g. [m|not \triangleq \lambda
     b:\text{Bool}. \text{choose}\: b\: false\: true]. In general, we can swap
     the types of [m|x] and [m|y] for any type A, and the function will still
     type-check.]

    ]
  [section 'Definitions'|
    [p|System F, alternatively known as the Girard-Reynolds Polymorphic Lambda
     Calculus, is a strictly more powerful version of the Simply-Typed lambda
     calculus.]

    [p|For the terms in System F, we have:]
    [p|
     Types: [m|A \triangleq \alpha \mid A \to A \mid \forall \alpha. A] [br|]
     Terms: [m|e \triangleq x \mid \lambda x : A. e \mid e\: e\mid
               \Lambda \alpha. e\mid e\: A] [br|]

     Type Contexts: [m|\Theta \triangleq \cdot \mid \Theta, \alpha][br|]
     Term Contexts: [m|\Gamma \triangleq \cdot \mid \Gamma, x : A][br|] ]

    [p|We also have three different judgements:]

    [table|
      [row|[tv|[b|Judgement]] [tv|[b|Notation]]]
      [row|[tv|Well-formedness of type]
           [tv|[m|\theta \vdash A \text{ type}]]]
      [row|[tv|Well-formedness of term contexts]
           [tv|[m|\Theta \vdash \Gamma \text{ ctx}]]]
      [row|[tv|Term typing] [tv|[m|\Theta, \Gamma \vdash e : A]]]]

    [def 'Well Formed Type'|
     [M| \begin{prooftree}
         \AxiomC{$\alpha \in \Theta$}
         \UnaryInfC{$\Theta \vdash \alpha \text{ type}$}
         \end{prooftree}
         \qquad
         \begin{prooftree}
         \AxiomC{$\Theta \vdash A \text{ type}$}
         \AxiomC{$\Theta \vdash B \text{ type}$}
         \BinaryInfC{$\Theta \vdash A \to B \text{ type}$}
         \end{prooftree}
         \qquad
         \begin{prooftree}
         \AxiomC{$\Theta,\alpha \vdash A \text{ type}$}
         \UnaryInfC{$\Theta \vdash \forall \alpha. A \text{ type}$}
         \end{prooftree}]]

    [def 'Well Formed Term Context'|
     [M| \begin{prooftree}
         \AxiomC{}
         \UnaryInfC{$\Theta \vdash \cdot \text{ ctx}$}
         \end{prooftree}
         \qquad
         \begin{prooftree}
         \AxiomC{$\Theta \vdash \Gamma \text{ ctx}$}
         \AxiomC{$\Theta \vdash A \text{ type}$}
         \BinaryInfC{$\Theta \vdash \Gamma,x:A \text{ ctx}$}
         \end{prooftree}]]

    [def 'Term Typing'|
     [[M| \begin{array}{c}
         \begin{prooftree}
         \AxiomC{$x:A\in\Gamma$}
         \RightLabel{(var)}\UnaryInfC{$\Theta; \Gamma \vdash x : A$}
         \end{prooftree}

         \\ \\

         \begin{prooftree}
         \AxiomC{$\Theta\vdash A \text{ type}$}
         \AxiomC{$\Theta;\Gamma,x:A\vdash e:B$}
         \RightLabel{(fun)}\BinaryInfC{$\Theta; \Gamma \vdash \lambda x :A.e : A \to B$}
         \end{prooftree}
         \qquad
         \begin{prooftree}
         \AxiomC{$\Theta\vdash e_1 A\to B$}
         \AxiomC{$\Theta;\Gamma\vdash e_2:A$}
         \RightLabel{(app)}\BinaryInfC{$\Theta; \Gamma \vdash e_1\: e_2 : B$}
         \end{prooftree}

         \\ \\

         \begin{prooftree}
         \AxiomC{$\Theta, \alpha;\Gamma \vdash e : B$}
         \RightLabel{(gen)}
         \UnaryInfC{$\Theta;\Gamma\vdash\Lambda\alpha . e: \forall\alpha.B$}
         \end{prooftree}
         \qquad
         \begin{prooftree}
         \AxiomC{$\Theta; \Gamma \vdash e : \forall\alpha.B$}
         \AxiomC{$\Theta \vdash A \text{ type}$}
         \RightLabel{(gen)}
         \BinaryInfC{$\Theta;\Gamma\vdash e\: A : [A/\alpha]B$}
         \end{prooftree}
         \end{array}

         ]]]
    [def 'Operational Semantics'|]]
  [section 'Church Encodings'|]]

[section 'Programming with Effects'|]

[section 'Continuations and Classical Logic'|
  [section 'Classical Logic'|]
  [section 'Direct Translation'|]
  [section 'Continuations'|

   [p|The typing rule of continuations do not make it at all obvious how they
    work, so we'll try and understand them intuitively. In essence,
    continuations represent 'proof by contradiction through time-travel'. Let's
    dig into what this means.]

   [p|The first term, [m|\text{letcont } u:\lnot X. e], has the following typing
    rule:]

   [M| \begin{prooftree}
       \AxiomC{$\Gamma,u:\lnot X\vdash e: E$}
       \UnaryInfC{$\text{letcont u}:\lnot X.e : X$}
       \end{prooftree}]

   [p|Let's think about what this rule is saying: Let's assume [m|\lnot X] (in the
    form of [m|u]. If we can then prove that [m|X] holds, we have a
    contradiction, and so [m|\lnot X] must be false, i.e. [m|X] must be true.]

   [p|The second term, [m|throw_Y(e,e')] has the following typing rule:]

   [M| \begin{prooftree}
       \AxiomC{$\Gamma\vdash e: X$}
       \AxiomC{$\Gamma\vdash e':\lnot X$}
       \BinaryInfC{$\text{throw}_Y(e,e') : Y$}
       \end{prooftree}]

   [p|This is the 'principle of explosion': if we can derive both [m|X] and
    [m|\lnot X], then can derive any statement. This is relatively easy to show:
    suppose that both [m|X] and [m|\lnot X] are true, and we prove that 'Unicorns
    exist': First, form the statement [m|X\lor \text{'unicorns exist'}]. This
    must be true because [m|X] is true. Now, we use the fact that [m|\lnot X] is
    true to eliminate the LHS - if [m|X\lor \text{'unicorns exist'}] is true but
    [m|X] is false, then clearly unicorns exist! We can use the same strategy to
    derive any statement.]
    

   [p|This may seem confusing at first: it makes sense that
    [m|\text{throw}_Y(e,e')] can have any type from a logic perspective, but 
    what about a computational perspective - what value does it evaluate to? The
    short answer is: it doesn't! We'll now look at an informal overview of the
    semantics to see how [m|letcont] and [m|throw] work.]

]]


[section 'Dependent Types'|]